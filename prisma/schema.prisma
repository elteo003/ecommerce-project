// prisma/schema.prisma

datasource db {
  provider = "postgresql" // oppure "sqlite" o "mysql"…
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      Role       @default(CUSTOMER)
  firstName String     @default("")
  lastName  String     @default("")
  cartItems CartItem[] // relazione one‐to‐many con CartItem
  Order     Order[]
}

// filepath: prisma/schema.prisma
enum Role {
  CUSTOMER
  ARTISAN
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[] // relazione one‐to‐many con Product

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // — NUOVO: relazione con Category
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  cartItems CartItem[]
  OrderItem OrderItem[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float // prezzo snapshot al momento dell'acquisto
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}
